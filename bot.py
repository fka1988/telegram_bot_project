import os
import logging
import random
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TEACHER_CODE = "2308"

SELECT_ROLE, TEACHER_AUTH, HANDLE_TEST_UPLOAD, CHOOSE_NEXT_ACTION, ASK_FEEDBACK_TYPE = range(5)

BASE_DIR = Path("tests")
BASE_DIR.mkdir(exist_ok=True)

def generate_test_id() -> str:
    return str(random.randint(1000, 9999))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å", "üßë‚Äçüéì –Ø —É—á–µ–Ω–∏–∫"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return SELECT_ROLE

async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    role = update.message.text
    if role == "üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        return TEACHER_AUTH
    else:
        context.user_data["role"] = "student"
        await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞.")
        return ConversationHandler.END

async def teacher_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == TEACHER_CODE:
        context.user_data["role"] = "teacher"
        context.user_data["test_id"] = generate_test_id()
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.\n\n"
            "üìå –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ PDF-—Ñ–∞–π–ª, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å—å —Ç–µ—Å—Ç.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.\n\n"
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)."
        )
        return HANDLE_TEST_UPLOAD
    else:
        context.user_data["role"] = "student"
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞.")
        return ConversationHandler.END

async def handle_test_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    test_id = context.user_data.get("test_id", generate_test_id())
    test_dir = BASE_DIR / str(user_id) / test_id
    test_dir.mkdir(parents=True, exist_ok=True)

    if update.message.document:
        file = update.message.document
    elif update.message.photo:
        file = update.message.photo[-1]
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return HANDLE_TEST_UPLOAD

    file_obj = await file.get_file()
    file_name = file.file_name if hasattr(file, "file_name") and file.file_name else f"{file.file_id}.jpg"
    file_path = test_dir / file_name
    await file_obj.download_to_drive(custom_path=str(file_path))

    keyboard = [["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞"]]
    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª {file_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–ö–æ–¥ —Ç–µ—Å—Ç–∞: `{test_id}`\n\n"
        f"–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞?",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSE_NEXT_ACTION

async def handle_next_action_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É—á–µ–Ω–∏–∫ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(
                [["üìä –ö—Ä–∞—Ç–∫–∏–π"], ["üìã –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π"], ["üìö –ü–æ–ª–Ω—ã–π"]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return ASK_FEEDBACK_TYPE
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë":
        await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return HANDLE_TEST_UPLOAD
    else:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return CHOOSE_NEXT_ACTION

async def set_feedback_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    feedback_mode = update.message.text
    test_id = context.user_data.get("test_id")
    user_id = update.message.from_user.id
    test_dir = BASE_DIR / str(user_id) / test_id

    if feedback_mode == "üìä –ö—Ä–∞—Ç–∫–∏–π":
        mode = "short"
    elif feedback_mode == "üìã –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π":
        mode = "detailed"
    elif feedback_mode == "üìö –ü–æ–ª–Ω—ã–π":
        mode = "full"
    else:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
        return ASK_FEEDBACK_TYPE

    with open(test_dir / "feedback.mode", "w", encoding="utf-8") as f:
        f.write(mode)

    await update.message.reply_text(
        f"‚úÖ –¢–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {feedback_mode}\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/key {test_id} <–∫–ª—é—á_–æ—Ç–≤–µ—Ç–æ–≤>`",
        parse_mode="Markdown"
    )
    return ConversationHandler.END

async def save_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("role") != "teacher":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–ª—é—á–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/key <–∫–æ–¥_—Ç–µ—Å—Ç–∞> <–∫–ª—é—á_–æ—Ç–≤–µ—Ç–æ–≤>`", parse_mode="Markdown")
        return

    test_code = context.args[0]
    answers = " ".join(context.args[1:])

    found = False
    for user_folder in BASE_DIR.iterdir():
        test_folder = user_folder / test_code
        if test_folder.exists() and test_folder.is_dir():
            found = True
            break

    if not found:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥.")
        return

    key_path = test_folder / "answers.key"
    with open(key_path, "w", encoding="utf-8") as f:
        f.write(answers)

    await update.message.reply_text(
        f"‚úÖ –ö–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞ {test_code} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
        f"–û—Ç–≤–µ—Ç—ã: {answers}\n"
        f"–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(answers)} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await start(update, context)

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ROLE: [MessageHandler(filters.TEXT, select_role)],
            TEACHER_AUTH: [MessageHandler(filters.TEXT, teacher_auth)],
            HANDLE_TEST_UPLOAD: [MessageHandler(filters.Document.ALL | filters.PHOTO, handle_test_upload)],
            CHOOSE_NEXT_ACTION: [MessageHandler(filters.TEXT, handle_next_action_choice)],
            ASK_FEEDBACK_TYPE: [MessageHandler(filters.TEXT, set_feedback_type)],
        },
        fallbacks=[CommandHandler("reset", reset)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("key", save_key))

    application.run_polling()

if __name__ == "__main__":
    main()
