
import os
import json
import random
import string
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CODE = "2308"
DATA_FILE = "tests.json"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–∞—Ö
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({}, f)


def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)


def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)


def generate_test_code(length=4):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å"), KeyboardButton("üë®‚Äçüéì –Ø —É—á–µ–Ω–∏–∫")]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")
        context.user_data["awaiting_admin_code"] = True
    elif text == "üë®‚Äçüéì –Ø —É—á–µ–Ω–∏–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:")
        context.user_data["role"] = "student"


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if context.user_data.get("awaiting_admin_code"):
        if text == ADMIN_CODE:
            context.user_data["role"] = "teacher"
            await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É—á–∏—Ç–µ–ª—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.")
        else:
            context.user_data["role"] = "student"
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:")
        context.user_data["awaiting_admin_code"] = False
    elif context.user_data.get("role") == "student":
        test_code = text.strip().upper()
        data = load_data()
        if test_code in data:
            file_id = data[test_code]["file_id"]
            await update.message.reply_text("–í–æ—Ç –≤–∞—à —Ç–µ—Å—Ç:")
            await update.message.reply_document(file_id)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Ç–µ—Å—Ç–∞.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("role") != "teacher":
        await update.message.reply_text("–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–µ—Å—Ç—ã.")
        return

    document = update.message.document
    file_id = document.file_id
    file_name = document.file_name or "—Ç–µ—Å—Ç"

    test_code = generate_test_code()
    data = load_data()
    data[test_code] = {
        "file_id": file_id,
        "file_name": file_name
    }
    save_data(data)

    await update.message.reply_text(
        f"‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ *{file_name}*.
–ö–æ–¥ —Ç–µ—Å—Ç–∞: `{test_code}`",
        parse_mode="Markdown"
    )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("role") != "teacher":
        await update.message.reply_text("–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–µ—Å—Ç—ã.")
        return

    photo = update.message.photo[-1]
    file_id = photo.file_id

    test_code = generate_test_code()
    data = load_data()
    data[test_code] = {
        "file_id": file_id,
        "file_name": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    }
    save_data(data)

    await update.message.reply_text(
        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.
–ö–æ–¥ —Ç–µ—Å—Ç–∞: `{test_code}`",
        parse_mode="Markdown"
    )


async def resset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await start(update, context)


if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("resset", resset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å|üë®‚Äçüéì –Ø —É—á–µ–Ω–∏–∫"), handle_role_selection))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()
