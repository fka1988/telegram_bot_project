import os
import logging
import random
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TEACHER_CODE = "2308"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_ROLE, TEACHER_AUTH, HANDLE_TEST_UPLOAD, AWAITING_MORE_FILES = range(4)

# –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
BASE_DIR = Path("tests")
BASE_DIR.mkdir(exist_ok=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_test_code():
    while True:
        code = str(random.randint(1000, 9999))
        if not any((user_dir / code).exists() for user_dir in BASE_DIR.iterdir()):
            return code

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å", "üßë‚Äçüéì –Ø —É—á–µ–Ω–∏–∫"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return SELECT_ROLE

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    role = update.message.text
    if role == "üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        return TEACHER_AUTH
    else:
        context.user_data["role"] = "student"
        await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.")
        return ConversationHandler.END

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
async def teacher_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == TEACHER_CODE:
        context.user_data["role"] = "teacher"
        context.user_data["test_code"] = generate_test_code()
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).\n\n–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ PDF ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª.\n–ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É."
        )
        return HANDLE_TEST_UPLOAD
    else:
        context.user_data["role"] = "student"
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞
async def handle_test_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    test_code = context.user_data["test_code"]
    test_dir = BASE_DIR / str(user_id) / test_code
    test_dir.mkdir(parents=True, exist_ok=True)

    if update.message.document:
        file = update.message.document
        file_obj = await file.get_file()
        file_name = file.file_name or f"{file.file_id}.pdf"
        file_path = test_dir / file_name
        await file_obj.download_to_drive(custom_path=str(file_path))

        await update.message.reply_text(
            f"‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ *{file_name}*.\n–ö–æ–¥ —Ç–µ—Å—Ç–∞: `{test_code}`\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–æ–π:\n`/key {test_code} <–æ—Ç–≤–µ—Ç—ã>`",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    elif update.message.photo:
        file = update.message.photo[-1]
        file_obj = await file.get_file()
        file_path = test_dir / f"{file.file_unique_id}.jpg"
        await file_obj.download_to_drive(custom_path=str(file_path))

        keyboard = [["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–ª—é—á—É"]]
        await update.message.reply_text(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n–ö–æ–¥ —Ç–µ—Å—Ç–∞: `{test_code}`\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–ª—é—á—É?",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return AWAITING_MORE_FILES

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return HANDLE_TEST_UPLOAD

# –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–ª—é—á—É
async def awaiting_more_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return HANDLE_TEST_UPLOAD
    else:
        test_code = context.user_data["test_code"]
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∫ —Ç–µ—Å—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n`/key {test_code} <–æ—Ç–≤–µ—Ç—ã>`",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞
async def save_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("role") != "teacher":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–ª—é—á–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/key <–∫–æ–¥_—Ç–µ—Å—Ç–∞> <–∫–ª—é—á_–æ—Ç–≤–µ—Ç–æ–≤>", parse_mode="Markdown")
        return

    test_code = context.args[0]
    answers = "".join(context.args[1:])
    found = False

    for user_dir in BASE_DIR.iterdir():
        test_folder = user_dir / test_code
        if test_folder.exists():
            key_path = test_folder / "answers.key"
            with open(key_path, "w", encoding="utf-8") as f:
                f.write(answers)
            await update.message.reply_text(
                f"‚úÖ –ö–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞ {test_code} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–û—Ç–≤–µ—Ç—ã: `{answers}`\n–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(answers)} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.",
                parse_mode="Markdown"
            )
            found = True
            break

    if not found:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥.")

# –ö–æ–º–∞–Ω–¥–∞ /answer
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/answer <–∫–æ–¥_—Ç–µ—Å—Ç–∞> <–≤–∞—à–∏_–æ—Ç–≤–µ—Ç—ã>`", parse_mode="Markdown")
        return

    test_code = context.args[0]
    student_answers = "".join(context.args[1:])
    found = False

    for user_dir in BASE_DIR.iterdir():
        test_folder = user_dir / test_code
        key_path = test_folder / "answers.key"
        if test_folder.exists() and key_path.exists():
            with open(key_path, encoding="utf-8") as f:
                correct_answers = f.read().strip()

            if len(student_answers) != len(correct_answers):
                await update.message.reply_text(
                    f"‚ùó –ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ ({len(student_answers)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(correct_answers)})."
                )
                return

            result = []
            correct_count = 0
            for i, (s, c) in enumerate(zip(student_answers, correct_answers), start=1):
                if s == c:
                    result.append(f"{i}) ‚úÖ")
                    correct_count += 1
                else:
                    result.append(f"{i}) ‚ùå (–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {c})")

            result_text = "\n".join(result)
            await update.message.reply_text(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result_text}\n\n–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count}/{len(correct_answers)}"
            )
            found = True
            break

    if not found:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await start(update, context)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ROLE: [MessageHandler(filters.TEXT, select_role)],
            TEACHER_AUTH: [MessageHandler(filters.TEXT, teacher_auth)],
            HANDLE_TEST_UPLOAD: [MessageHandler(filters.Document.ALL | filters.PHOTO, handle_test_upload)],
            AWAITING_MORE_FILES: [MessageHandler(filters.TEXT, awaiting_more_files)],
        },
        fallbacks=[CommandHandler("reset", reset)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("key", save_key))
    app.add_handler(CommandHandler("answer", handle_answer))

    app.run_polling()

if __name__ == "__main__":
    main()
