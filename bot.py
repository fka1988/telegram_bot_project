
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

TEACHER_CODE = "2308"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–Ø —É—á–µ–Ω–∏–∫", callback_data='role_student')],
        [InlineKeyboardButton("–Ø —É—á–∏—Ç–µ–ª—å", callback_data='role_teacher')]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    role = query.data

    if role == "role_teacher":
        await query.edit_message_text("üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        context.user_data["awaiting_code"] = True
    else:
        context.user_data["role"] = "student"
        await query.edit_message_text("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å *–£—á–µ–Ω–∏–∫*.", parse_mode="Markdown")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_code"):
        if update.message.text.strip() == TEACHER_CODE:
            context.user_data["role"] = "teacher"
            await update.message.reply_text("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π. –†–æ–ª—å *–£—á–∏—Ç–µ–ª—å* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", parse_mode="Markdown")
        else:
            context.user_data["role"] = "student"
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å *–£—á–µ–Ω–∏–∫*.", parse_mode="Markdown")
        context.user_data["awaiting_code"] = False
    else:
        role = context.user_data.get("role", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        await update.message.reply_text(f"üîé –í–∞—à–∞ —Ä–æ–ª—å: *{role}*", parse_mode="Markdown")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üîÑ –†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_role))
    app.add_handler(CommandHandler("resset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()
