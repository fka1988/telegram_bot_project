import os
import logging
import random
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TEACHER_CODE = "2308"

SELECT_ROLE, TEACHER_AUTH, HANDLE_TEST_UPLOAD, ASK_FEEDBACK_TYPE, ENTER_TEST_CODE, ENTER_ANSWERS = range(6)

BASE_DIR = Path("tests")
BASE_DIR.mkdir(exist_ok=True)

FEEDBACK_MODES = {
    "–ö–æ—Ä–æ—Ç–∫–∏–π": "short",
    "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π": "detailed",
    "–ü–æ–ª–Ω—ã–π": "full",
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å", "üßë‚Äçüéì –Ø —É—á–µ–Ω–∏–∫"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return SELECT_ROLE


async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    role = update.message.text
    if role == "üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        return TEACHER_AUTH
    else:
        context.user_data["role"] = "student"
        await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:")
        return ENTER_TEST_CODE


async def teacher_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == TEACHER_CODE:
        context.user_data["role"] = "teacher"
        test_code = str(random.randint(1000, 9999))
        context.user_data["test_code"] = test_code
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).\n\n–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ PDF ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å—å —Ç–µ—Å—Ç –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ."
        )
        return HANDLE_TEST_UPLOAD
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.")
        context.user_data["role"] = "student"
        await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:")
        return ENTER_TEST_CODE


# –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
async def enter_test_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    code = update.message.text.strip()
    found = False
    for user_folder in BASE_DIR.iterdir():
        test_folder = user_folder / code
        if test_folder.exists():
            found = True
            context.user_data["test_code"] = code
            context.user_data["test_folder"] = test_folder
            break

    if not found:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.")
        return ENTER_TEST_CODE

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∞ —É—á–µ–Ω–∏–∫—É (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    for file in test_folder.iterdir():
        if file.suffix in [".pdf", ".jpg", ".jpeg", ".png"]:
            await update.message.reply_document(document=file.open("rb"))

    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
    return ENTER_ANSWERS


# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (handle_test_upload, save_key, reset, –∏ main) –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–∞–ª—å—à–µ
