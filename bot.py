import os
import logging
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    filters, ContextTypes
)
import random

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TEACHER_CODE = "2308"
CHOOSING_ROLE, VERIFY_CODE, WAIT_FOR_FILE, MORE_IMAGES, ENTER_ANSWER_KEY, SELECT_FEEDBACK_MODE, WAIT_FOR_TEST_CODE, WAIT_FOR_ANSWERS = range(8)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start –æ—Ç {update.effective_user.username}")
    context.user_data.clear()
    keyboard = [["üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å", "üßë‚Äçüéì –Ø —É—á–µ–Ω–∏–∫"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    return CHOOSING_ROLE

async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = update.message.text
    context.user_data["role"] = "teacher" if "—É—á–∏—Ç–µ–ª—å" in role else "student"
    logger.info(f"–†–æ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {context.user_data['role']}")

    if context.user_data["role"] == "teacher":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
        return VERIFY_CODE
    else:
        await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        return WAIT_FOR_TEST_CODE

async def verify_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if code == TEACHER_CODE:
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.\n\nüìå –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ PDF-—Ñ–∞–π–ª, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å—å —Ç–µ—Å—Ç.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.\n\nüìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)."
        )
        return WAIT_FOR_FILE
    else:
        context.user_data["role"] = "student"
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:")
        return WAIT_FOR_TEST_CODE

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–í—ã–∑–≤–∞–Ω handle_file")
    message = update.message

    if message.document:
        file = message.document
        filename = file.file_name or f"{file.file_id}.pdf"
    elif message.photo:
        file = message.photo[-1]
        filename = f"{file.file_id}.jpg"
    else:
        await message.reply_text("‚ùå –§–∞–π–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return WAIT_FOR_FILE

    test_id = str(random.randint(1000, 9999))
    context.user_data["test_id"] = test_id
    os.makedirs(test_id, exist_ok=True)

    file_path = os.path.join(test_id, filename)
    await file.get_file().download_to_drive(file_path)
    logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")

    # –ï—Å–ª–∏ —ç—Ç–æ PDF, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞
    if filename.lower().endswith(".pdf"):
        await message.reply_text(f"‚úÖ –§–∞–π–ª {filename} –∑–∞–≥—Ä—É–∂–µ–Ω.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: abcdabcd):")
        return ENTER_ANSWER_KEY
    else:
        await message.reply_text(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞?",
                                 reply_markup=ReplyKeyboardMarkup([["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞"]], one_time_keyboard=True))
        return MORE_IMAGES

async def more_images_or_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "–¥–æ–±–∞–≤–∏—Ç—å" in update.message.text.lower():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–∏–Ω —Ñ–∞–π–ª.")
        return WAIT_FOR_FILE
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: abcdabcd):", reply_markup=ReplyKeyboardRemove())
        return ENTER_ANSWER_KEY

async def save_answer_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = update.message.text.strip().lower()
    test_id = context.user_data["test_id"]
    with open(os.path.join(test_id, "key.txt"), "w") as f:
        f.write(key)
    context.user_data["key"] = key

    keyboard = [["üìä –ö–æ—Ä–æ—Ç–∫–∏–π (—Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)", "üìã –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π (–≤–µ—Ä–Ω–æ/–Ω–µ–≤–µ—Ä–Ω–æ)"],
                ["üìò –ü–æ–ª–Ω—ã–π (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏)"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞:",
                                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    return SELECT_FEEDBACK_MODE

async def save_feedback_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = update.message.text
    test_id = context.user_data["test_id"]
    selected_mode = (
        "short" if "–∫–æ—Ä–æ—Ç–∫–∏–π" in mode.lower()
        else "detailed" if "—Ä–∞–∑–≤—ë—Ä–Ω—É—Ç" in mode.lower()
        else "full"
    )
    with open(os.path.join(test_id, "feedback.mode"), "w") as f:
        f.write(selected_mode)

    await update.message.reply_text(f"‚úÖ –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(context.user_data['key'])} –≤–æ–ø—Ä–æ—Å–æ–≤.")
    return ConversationHandler.END

async def receive_test_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    test_id = update.message.text.strip()
    context.user_data["test_id"] = test_id
    if not os.path.exists(os.path.join(test_id, "key.txt")):
        await update.message.reply_text("‚ùå –ö–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–æ–±—â–∏—Ç–µ —É—á–∏—Ç–µ–ª—é.")
        return ConversationHandler.END

    await update.message.reply_text("üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: abcdabcdabcd):")
    return WAIT_FOR_ANSWERS

async def receive_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answers = update.message.text.strip().lower()
    test_id = context.user_data["test_id"]
    key_path = os.path.join(test_id, "key.txt")
    mode_path = os.path.join(test_id, "feedback.mode")

    if not os.path.exists(key_path):
        await update.message.reply_text("‚ùå –ö–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    with open(key_path) as f:
        key = f.read().strip().lower()

    if len(answers) != len(key):
        await update.message.reply_text("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª—é—á–æ–º.")
        return ConversationHandler.END

    score = sum(1 for a, k in zip(answers, key) if a == k)
    mode = "short"
    if os.path.exists(mode_path):
        with open(mode_path) as f:
            mode = f.read().strip()

    if mode == "short":
        text = f"‚úÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {len(key)}"
    elif mode == "detailed":
        text = "\n".join([f"{i + 1}) {'‚úÖ' if a == k else '‚ùå'}" for i, (a, k) in enumerate(zip(answers, key))])
    else:
        text = "\n".join([f"{i + 1}) {'‚úÖ' if a == k else f'‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {k}'}" for i, (a, k) in enumerate(zip(answers, key))])

    await update.message.reply_text(text)
    return ConversationHandler.END

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    return await start(update, context)

def main():
    import dotenv
    dotenv.load_dotenv()
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_ROLE: [MessageHandler(filters.TEXT, choose_role)],
            VERIFY_CODE: [MessageHandler(filters.TEXT, verify_code)],
            # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
            WAIT_FOR_FILE: [MessageHandler(filters.ALL, handle_file)],
            MORE_IMAGES: [MessageHandler(filters.TEXT, more_images_or_key)],
            ENTER_ANSWER_KEY: [MessageHandler(filters.TEXT, save_answer_key)],
            SELECT_FEEDBACK_MODE: [MessageHandler(filters.TEXT, save_feedback_mode)],
            WAIT_FOR_TEST_CODE: [MessageHandler(filters.TEXT, receive_test_code)],
            WAIT_FOR_ANSWERS: [MessageHandler(filters.TEXT, receive_answers)],
        },
        fallbacks=[CommandHandler("reset", reset)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
