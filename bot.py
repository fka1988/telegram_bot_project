import os
import logging
import random
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, ConversationHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TEACHER_CODE = "2308"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_ROLE, TEACHER_AUTH, HANDLE_TEST_UPLOAD, ADD_OR_KEY, ENTER_FEEDBACK_MODE = range(5)

# –ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
BASE_DIR = Path("tests")
BASE_DIR.mkdir(exist_ok=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å", "üßë‚Äçüéì –Ø —É—á–µ–Ω–∏–∫"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return SELECT_ROLE

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()

    if text == "üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        return TEACHER_AUTH

    elif text == "üßë‚Äçüéì –Ø —É—á–µ–Ω–∏–∫":
        context.user_data["role"] = "student"
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:"
        )
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return SELECT_ROLE

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á–∏—Ç–µ–ª—è
async def teacher_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == TEACHER_CODE:
        context.user_data["role"] = "teacher"
        test_id = str(random.randint(1000, 9999))
        context.user_data["test_id"] = test_id
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.\n\nüìå –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ PDF-—Ñ–∞–π–ª, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å—å —Ç–µ—Å—Ç.\n–ï—Å–ª–∏ —É –≤–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.\n\nüìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).",
            reply_markup=ReplyKeyboardRemove()
        )
        return HANDLE_TEST_UPLOAD
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:")
        context.user_data["role"] = "student"
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞
async def handle_test_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    test_id = context.user_data["test_id"]
    test_dir = BASE_DIR / str(user_id) / test_id
    test_dir.mkdir(parents=True, exist_ok=True)

    file = update.message.document or (update.message.photo[-1] if update.message.photo else None)
    if not file:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return HANDLE_TEST_UPLOAD

    file_obj = await file.get_file()
    file_name = getattr(file, "file_name", f"{file.file_id}.jpg")
    file_path = test_dir / file_name
    await file_obj.download_to_drive(custom_path=str(file_path))

    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª {file_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–ö–æ–¥ —Ç–µ—Å—Ç–∞: {test_id}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞?",
        reply_markup=ReplyKeyboardMarkup([["‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë", "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞"]], resize_keyboard=True)
    )
    return ADD_OR_KEY

# –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á
async def add_or_enter_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().lower()

    if "–µ—â—ë" in text:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return HANDLE_TEST_UPLOAD

    elif "–∫–ª—é—á" in text:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: abcdabcdabcd):",
            reply_markup=ReplyKeyboardRemove()
        )
        return ENTER_FEEDBACK_MODE

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return ADD_OR_KEY

# –í–≤–æ–¥ –∫–ª—é—á–∞ –∏ –≤—ã–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async def enter_feedback_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["answers"] = update.message.text.strip()

    keyboard = [
        ["üìä –ö–æ—Ä–æ—Ç–∫–∏–π (—Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)"],
        ["üìã –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π (–≤–µ—Ä–Ω–æ/–Ω–µ–≤–µ—Ä–Ω–æ)"],
        ["üìò –ü–æ–ª–Ω—ã–π (–≤–µ—Ä–Ω–æ/–Ω–µ–≤–µ—Ä–Ω–æ + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ConversationHandler.END

# /key ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á –≤—Ä—É—á–Ω—É—é
async def save_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("role") != "teacher":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–ª—é—á–∏.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç:\n`/key <–∫–æ–¥_—Ç–µ—Å—Ç–∞> <–∫–ª—é—á_–æ—Ç–≤–µ—Ç–æ–≤>`", parse_mode="Markdown")
        return

    test_code, answers = context.args[0], "".join(context.args[1:])
    found = False

    for user_folder in BASE_DIR.iterdir():
        test_folder = user_folder / test_code
        if test_folder.exists():
            found = True
            break

    if not found:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    key_path = test_folder / "answers.key"
    with open(key_path, "w", encoding="utf-8") as f:
        f.write(answers)

    count = len(answers)
    await update.message.reply_text(
        f"‚úÖ –ö–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞ {test_code} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–û—Ç–≤–µ—Ç—ã: {answers}\n–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
    )

# /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    return await start(update, context)

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_role)],
            TEACHER_AUTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, teacher_auth)],
            HANDLE_TEST_UPLOAD: [
                MessageHandler(filters.Document.ALL | filters.PHOTO, handle_test_upload),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_or_enter_key),  # üëà –≤–∞–∂–Ω–æ
            ],
            ADD_OR_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_or_enter_key)],
            ENTER_FEEDBACK_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_feedback_mode)],
        },
        fallbacks=[CommandHandler("reset", reset)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("key", save_key))
    app.add_handler(CommandHandler("reset", reset))
    app.run_polling()

if __name__ == "__main__":
    main()
