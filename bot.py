import os
import logging
import random
import datetime
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    SELECT_ROLE, SHOW_MENU, AWAITING_FILE, ENTER_KEY,
    SELECT_FEEDBACK_TYPE, ENTER_TEST_CODE, HANDLE_ANSWERS, STUDENT_MENU
) = range(8)

BASE_DIR = Path("tests")
TEACHER_CODE = "2308"
MAX_ATTEMPTS = 2

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [[KeyboardButton("–£—á–∏—Ç–µ–ª—å")], [KeyboardButton("–£—á–µ–Ω–∏–∫")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return SELECT_ROLE

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = update.message.text.lower()
    context.user_data.clear()
    if role == "—É—á–∏—Ç–µ–ª—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–∏—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())
        return SHOW_MENU
    else:
        context.user_data["role"] = "student"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        return ENTER_TEST_CODE

# –ú–µ–Ω—é —É—á–∏—Ç–µ–ª—è
async def show_teacher_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != TEACHER_CODE:
        context.user_data["role"] = "student"
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å —É—á–µ–Ω–∏–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:")
        return ENTER_TEST_CODE

    context.user_data["role"] = "teacher"
    keyboard = [[KeyboardButton("–ú–æ–∏ —Ç–µ—Å—Ç—ã")], [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç")], [KeyboardButton("–û —Å–µ–±–µ")]]
    await update.message.reply_text("–ú–µ–Ω—é —É—á–∏—Ç–µ–ª—è:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return SHOW_MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É—á–∏—Ç–µ–ª—è
async def handle_teacher_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) —Å —Ç–µ—Å—Ç–æ–º:")
        return AWAITING_FILE
    elif text == "–ú–æ–∏ —Ç–µ—Å—Ç—ã":
        teacher_dir = BASE_DIR / str(update.message.from_user.id)
        if teacher_dir.exists():
            tests = list(teacher_dir.iterdir())
            if tests:
                message = "\n".join(f"üìÑ {test.name}" for test in tests if test.is_dir())
                await update.message.reply_text(f"–í–∞—à–∏ —Ç–µ—Å—Ç—ã:\n{message}")
            else:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
    elif text == "–û —Å–µ–±–µ":
        await update.message.reply_text("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.")
    return SHOW_MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    test_code = str(random.randint(1000, 9999))
    test_dir = BASE_DIR / str(user_id) / test_code
    test_dir.mkdir(parents=True, exist_ok=True)

    if update.message.document:
        file = await update.message.document.get_file()
        file_ext = Path(update.message.document.file_name).suffix
    else:
        file = await update.message.photo[-1].get_file()
        file_ext = ".jpg"

    file_path = test_dir / f"test{file_ext}"
    await file.download_to_drive(file_path)

    context.user_data["test_dir"] = test_dir
    context.user_data["test_code"] = test_code

    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1–∞,2–≤,3–≥,...):")
    return ENTER_KEY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_key_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key_text = update.message.text.replace(" ", "").lower()
    key = key_text.split(",")
    test_dir = context.user_data["test_dir"]

    with open(test_dir / "key.txt", "w") as f:
        f.write(",".join(key))

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö—Ä–∞—Ç–∫–∏–π", callback_data="short")],
            [InlineKeyboardButton("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π", callback_data="detailed")],
            [InlineKeyboardButton("–ü–æ–ª–Ω—ã–π", callback_data="full")]
        ])
    )
    return SELECT_FEEDBACK_TYPE

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async def select_feedback_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    mode = query.data
    test_dir = context.user_data["test_dir"]
    with open(test_dir / "feedback.mode", "w") as f:
        f.write(mode)
    await query.edit_message_text(f"–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n–ö–æ–¥ —Ç–µ—Å—Ç–∞: {context.user_data['test_code']}")
    return SHOW_MENU

# –£—á–µ–Ω–∏–∫ ‚Äî –≤–≤–æ–¥ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞
async def handle_test_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    test_code = update.message.text.strip()
    found = False
    for teacher in BASE_DIR.iterdir():
        path = teacher / test_code
        if path.exists():
            context.user_data["test_dir"] = path
            found = True
            break

    if not found:
        await update.message.reply_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return ENTER_TEST_CODE

    context.user_data["test_code"] = test_code
    context.user_data["attempts"] = context.user_data.get("attempts", 0)
    context.user_data["start_time"] = datetime.datetime.now().isoformat()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    return HANDLE_ANSWERS

# –£—á–µ–Ω–∏–∫ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_student_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answers = [a.strip().lower() for a in update.message.text.split(",")]
    test_dir = context.user_data["test_dir"]
    with open(test_dir / "key.txt") as f:
        correct = f.read().split(",")
    feedback = (test_dir / "feedback.mode").read_text().strip()

    result = []
    score = 0
    for i, ans in enumerate(answers):
        correct_ans = correct[i] if i < len(correct) else "-"
        if ans == correct_ans:
            score += 1
            result.append(f"{i+1}. ‚úÖ")
        else:
            if feedback == "short":
                continue
            elif feedback == "detailed":
                result.append(f"{i+1}. ‚ùå")
            elif feedback == "full":
                result.append(f"{i+1}. ‚ùå (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct_ans})")

    attempts = context.user_data.get("attempts", 0) + 1
    context.user_data["attempts"] = attempts

    summary = f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {len(correct)}\n"
    if feedback != "short":
        summary += "\n".join(result)

    await update.message.reply_text(summary)

    if attempts >= MAX_ATTEMPTS:
        await update.message.reply_text("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏.")
        return ConversationHandler.END
    else:
        await update.message.reply_text(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {MAX_ATTEMPTS - attempts}")
        return HANDLE_ANSWERS

# –ú–µ–Ω—é —É—á–µ–Ω–∏–∫–∞
async def handle_student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    return STUDENT_MENU

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–†–æ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
    return ConversationHandler.END

# ============== WEBHOOK –ó–ê–ü–£–°–ö ==============
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 8443))
    WEBHOOK_URL = f"https://{os.environ.get('RAILWAY_STATIC_URL')}"

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_role)],
            SHOW_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_teacher_menu)],
            AWAITING_FILE: [MessageHandler(filters.Document.ALL | filters.PHOTO, handle_file)],
            ENTER_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_key_input)],
            SELECT_FEEDBACK_TYPE: [CallbackQueryHandler(select_feedback_type)],
            ENTER_TEST_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_test_code)],
            HANDLE_ANSWERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_student_answers)],
            STUDENT_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_student_menu)],
        },
        fallbacks=[CommandHandler("reset", reset)],
        per_message=True,
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("reset", reset))

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL
    )
