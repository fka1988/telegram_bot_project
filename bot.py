import os
import logging
import random
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TEACHER_CODE = "2308"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_ROLE, TEACHER_AUTH, HANDLE_TEST_UPLOAD, WAIT_FOR_NEXT_FILE_OR_KEY = range(4)

BASE_DIR = Path("tests")
BASE_DIR.mkdir(exist_ok=True)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è test_id ‚Üî user_id
TEST_ID_TO_USER = {}

def generate_test_id():
    return str(random.randint(1000, 9999))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å", "üßë‚Äçüéì –Ø —É—á–µ–Ω–∏–∫"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return SELECT_ROLE

async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().lower()

    if "—É—á–∏—Ç–µ–ª—å" in text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        return TEACHER_AUTH

    elif "—É—á–µ–Ω–∏–∫" in text:
        context.user_data["role"] = "student"
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:"
        )
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return SELECT_ROLE

async def teacher_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.strip() == TEACHER_CODE:
        context.user_data["role"] = "teacher"
        test_id = generate_test_id()
        context.user_data["test_id"] = test_id
        user_id = update.message.from_user.id
        TEST_ID_TO_USER[test_id] = user_id

        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.\n\n"
            "üìå –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ PDF-—Ñ–∞–π–ª, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å—å —Ç–µ—Å—Ç.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.\n\n"
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)."
        )
        return HANDLE_TEST_UPLOAD
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.")
        context.user_data["role"] = "student"
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞:")
        return ConversationHandler.END

async def handle_test_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    test_id = context.user_data.get("test_id")
    test_dir = BASE_DIR / str(user_id) / test_id
    test_dir.mkdir(parents=True, exist_ok=True)

    if update.message.document:
        file = update.message.document
    elif update.message.photo:
        file = update.message.photo[-1]
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return HANDLE_TEST_UPLOAD

    file_obj = await file.get_file()
    file_name = file.file_name if hasattr(file, "file_name") and file.file_name else f"{file.file_id}.jpg"
    file_path = test_dir / file_name
    await file_obj.download_to_drive(custom_path=str(file_path))

    keyboard = [["‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë", "‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞"]]
    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª {file_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–ö–æ–¥ —Ç–µ—Å—Ç–∞: {test_id}\n\n"
        "–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return WAIT_FOR_NEXT_FILE_OR_KEY

async def wait_for_more_or_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.lower().strip()
    if "–∑–∞–≥—Ä—É–∑–∏—Ç—å" in text:
        await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–∏–Ω —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).")
        return HANDLE_TEST_UPLOAD
    elif "–ø–µ—Ä–µ–π—Ç–∏" in text:
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –æ—Ç–≤–µ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç—É:")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return WAIT_FOR_NEXT_FILE_OR_KEY

async def save_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("role") != "teacher":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–ª—é—á–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/key <–∫–æ–¥_—Ç–µ—Å—Ç–∞> <–∫–ª—é—á_–æ—Ç–≤–µ—Ç–æ–≤>", parse_mode="Markdown")
        return

    test_code = context.args[0]
    answers = "".join(context.args[1:]).strip()

    user_id = TEST_ID_TO_USER.get(test_code)
    if not user_id:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    test_folder = BASE_DIR / str(user_id) / test_code
    if not test_folder.exists():
        await update.message.reply_text("‚ùå –ü–∞–ø–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    key_path = test_folder / "answers.key"
    feedback_path = test_folder / "feedback.mode"

    with open(key_path, "w", encoding="utf-8") as f:
        f.write(answers)

    await update.message.reply_text(
        f"‚úÖ –ö–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞ {test_code} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
        f"–û—Ç–≤–µ—Ç—ã: {answers}\n"
        f"–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(answers)} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        f"‚ú≥Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
        f"1Ô∏è‚É£ –ö–æ—Ä–æ—Ç–∫–∏–π (—Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥)\n"
        f"2Ô∏è‚É£ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π (‚úÖ –∏–ª–∏ ‚ùå –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É)\n"
        f"3Ô∏è‚É£ –ü–æ–ª–Ω—ã–π (‚úÖ/‚ùå –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ)\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 3."
    )
    context.user_data["awaiting_feedback_choice"] = (test_folder,)

async def feedback_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "awaiting_feedback_choice" not in context.user_data:
        return

    text = update.message.text.strip()
    if text not in {"1", "2", "3"}:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É 1, 2 –∏–ª–∏ 3.")
        return

    feedback_mode = {"1": "short", "2": "detailed", "3": "full"}[text]
    test_folder = context.user_data.pop("awaiting_feedback_choice")[0]
    feedback_path = test_folder / "feedback.mode"

    with open(feedback_path, "w", encoding="utf-8") as f:
        f.write(feedback_mode)

    await update.message.reply_text("‚úÖ –§–æ—Ä–º–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    return await start(update, context)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ROLE: [MessageHandler(filters.TEXT, select_role)],
            TEACHER_AUTH: [MessageHandler(filters.TEXT, teacher_auth)],
            HANDLE_TEST_UPLOAD: [MessageHandler(filters.Document.ALL | filters.PHOTO, handle_test_upload)],
            WAIT_FOR_NEXT_FILE_OR_KEY: [MessageHandler(filters.TEXT, wait_for_more_or_key)],
        },
        fallbacks=[CommandHandler("reset", reset)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("key", save_key))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_choice))

    app.run_polling()

if __name__ == "__main__":
    main()
