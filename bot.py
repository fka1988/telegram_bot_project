import os
import logging
import random
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TEACHER_CODE = "2308"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
SELECT_ROLE, TEACHER_AUTH, HANDLE_TEST_UPLOAD, SELECT_FEEDBACK = range(4)

# –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
BASE_DIR = Path("tests")
BASE_DIR.mkdir(exist_ok=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞
def generate_test_id():
    return str(random.randint(1000, 9999))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å", "üßë‚Äçüéì –Ø —É—á–µ–Ω–∏–∫"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return SELECT_ROLE

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    role = update.message.text
    if role == "üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        return TEACHER_AUTH
    else:
        await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.")
        return ConversationHandler.END

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ —É—á–∏—Ç–µ–ª—è
async def teacher_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == TEACHER_CODE:
        context.user_data["role"] = "teacher"
        context.user_data["test_id"] = generate_test_id()
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).\n\n"
            "–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ PDF, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Å—å —Ç–µ—Å—Ç –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ."
        )
        return HANDLE_TEST_UPLOAD
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
async def handle_test_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    test_id = context.user_data["test_id"]
    test_dir = BASE_DIR / str(user_id) / test_id
    test_dir.mkdir(parents=True, exist_ok=True)

    if update.message.document:
        file = update.message.document
    elif update.message.photo:
        file = update.message.photo[-1]
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return HANDLE_TEST_UPLOAD

    file_obj = await file.get_file()
    file_name = file.file_name if hasattr(file, "file_name") and file.file_name else f"{file.file_id}.jpg"
    file_path = test_dir / file_name
    await file_obj.download_to_drive(custom_path=str(file_path))

    await update.message.reply_text(
        f"‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ *{file_name}*.\n–ö–æ–¥ —Ç–µ—Å—Ç–∞: `{test_id}`",
        parse_mode="Markdown"
    )

    await update.message.reply_text(
        "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [["üìä –ö–æ—Ä–æ—Ç–∫–∏–π", "üìã –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π", "üìò –ü–æ–ª–Ω—ã–π"]],
            one_time_keyboard=True,
            resize_keyboard=True,
        )
    )
    return SELECT_FEEDBACK

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async def select_feedback_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    mode_text = update.message.text
    test_id = context.user_data["test_id"]
    user_id = update.message.from_user.id
    test_dir = BASE_DIR / str(user_id) / test_id

    if mode_text == "üìä –ö–æ—Ä–æ—Ç–∫–∏–π":
        mode = "short"
    elif mode_text == "üìã –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π":
        mode = "detailed"
    elif mode_text == "üìò –ü–æ–ª–Ω—ã–π":
        mode = "full"
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECT_FEEDBACK

    with open(test_dir / "feedback.mode", "w", encoding="utf-8") as f:
        f.write(mode)

    await update.message.reply_text(
        f"‚úÖ –§–æ—Ä–º–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤—ã–±—Ä–∞–Ω: {mode_text}.\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"
        f"`/key {test_id} <–∫–ª—é—á_–æ—Ç–≤–µ—Ç–æ–≤>`",
        parse_mode="Markdown"
    )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /key
async def save_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("role") != "teacher":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–ª—é—á–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`/key <–∫–æ–¥_—Ç–µ—Å—Ç–∞> <–∫–ª—é—á_–æ—Ç–≤–µ—Ç–æ–≤>`",
            parse_mode="Markdown"
        )
        return

    test_code = context.args[0]
    answers = "".join(context.args[1:]).strip()
    found = False

    for user_folder in BASE_DIR.iterdir():
        test_folder = user_folder / test_code
        if test_folder.exists():
            found = True
            break

    if not found:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π.")
        return

    key_path = test_folder / "answers.key"
    with open(key_path, "w", encoding="utf-8") as f:
        f.write(answers)

    await update.message.reply_text(
        f"‚úÖ –ö–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞ {test_code} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
        f"–û—Ç–≤–µ—Ç—ã: `{answers}`\n"
        f"–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(answers)} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await start(update, context)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ROLE: [MessageHandler(filters.TEXT, select_role)],
            TEACHER_AUTH: [MessageHandler(filters.TEXT, teacher_auth)],
            HANDLE_TEST_UPLOAD: [MessageHandler(filters.Document.ALL | filters.PHOTO, handle_test_upload)],
            SELECT_FEEDBACK: [MessageHandler(filters.TEXT, select_feedback_mode)],
        },
        fallbacks=[CommandHandler("reset", reset)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("key", save_key))

    application.run_polling()

if __name__ == "__main__":
    main()
